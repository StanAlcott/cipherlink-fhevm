import { execSync } from "child_process";
import * as fs from "fs";
import * as path from "path";

const CONTRACT_NAME = "CipherLink";

// Hardhat project path (relative to cipher-link-frontend)
const rel = "../fhevm-hardhat-template";

// Output directory for generated ABI files
const outdir = path.resolve("./abi");

if (!fs.existsSync(outdir)) {
  fs.mkdirSync(outdir);
}

const dir = path.resolve(rel);
const dirname = path.basename(dir);

const line =
  "\n===================================================================\n";

if (!fs.existsSync(dir)) {
  console.error(
    `${line}Unable to locate ${rel}. Expecting ${dirname} directory${line}`
  );
  process.exit(1);
}

if (!fs.existsSync(outdir)) {
  console.error(`${line}Unable to locate ${outdir}.${line}`);
  process.exit(1);
}

const deploymentsDir = path.join(dir, "deployments");

function deployOnHardhatNode() {
  if (process.platform === "win32") {
    console.log("Auto-deployment not supported on Windows. Please deploy manually:");
    console.log("1. cd ../fhevm-hardhat-template");
    console.log("2. npx hardhat node (in terminal 1)");
    console.log("3. npx hardhat deploy --network localhost (in terminal 2)");
    return;
  }
  
  try {
    console.log("Auto-deploying CipherLink contract to local Hardhat node...");
    
    // Check if Hardhat node is running
    execSync(`node ./is-hardhat-node-running.mjs`, {
      cwd: path.resolve("./scripts"),
      stdio: "inherit",
    });
    
    // Deploy contract
    execSync(`cd ${dir} && npx hardhat deploy --network localhost --tags ${CONTRACT_NAME}`, {
      stdio: "inherit",
    });
    
    console.log("CipherLink contract deployed successfully!");
    
  } catch (e) {
    console.error(`${line}Auto-deployment failed: ${e}${line}`);
    console.log("Please deploy manually:");
    console.log("1. cd ../fhevm-hardhat-template");
    console.log("2. npx hardhat node (in terminal 1)");  
    console.log("3. npx hardhat deploy --network localhost (in terminal 2)");
    process.exit(1);
  }
}

function readDeployment(chainName, chainId, contractName, optional) {
  const chainDeploymentDir = path.join(deploymentsDir, chainName);

  if (!fs.existsSync(chainDeploymentDir) && chainId === 31337) {
    // Try to auto-deploy the contract on hardhat node
    deployOnHardhatNode();
  }

  if (!fs.existsSync(chainDeploymentDir)) {
    console.error(
      `${line}Unable to locate '${chainDeploymentDir}' directory.\n\n1. Go to '${dirname}' directory\n2. Run 'npx hardhat deploy --network ${chainName} --tags ${contractName}'.${line}`
    );
    if (!optional) {
      process.exit(1);
    }
    return undefined;
  }

  const contractFile = path.join(chainDeploymentDir, `${contractName}.json`);
  if (!fs.existsSync(contractFile)) {
    console.error(
      `${line}Contract deployment file not found: ${contractFile}\n\nRun: npx hardhat deploy --network ${chainName} --tags ${contractName}${line}`
    );
    if (!optional) {
      process.exit(1);
    }
    return undefined;
  }

  const jsonString = fs.readFileSync(contractFile, "utf-8");
  const obj = JSON.parse(jsonString);
  obj.chainId = chainId;

  return obj;
}

// Try to read localhost deployment (auto-deploy if needed)
console.log("Reading localhost deployment...");
const deployLocalhost = readDeployment("localhost", 31337, CONTRACT_NAME, false);

// Sepolia is optional (for testing)
console.log("Reading Sepolia deployment (optional)...");
let deploySepolia = readDeployment("sepolia", 11155111, CONTRACT_NAME, true);
if (!deploySepolia) {
  console.log("Sepolia deployment not found, using localhost ABI with zero address");
  deploySepolia = { 
    abi: deployLocalhost.abi, 
    address: "0x0000000000000000000000000000000000000000",
    chainId: 11155111
  };
}

// Verify ABI consistency between networks
if (deployLocalhost && deploySepolia) {
  if (
    JSON.stringify(deployLocalhost.abi) !== JSON.stringify(deploySepolia.abi)
  ) {
    console.error(
      `${line}Deployments on localhost and Sepolia have different ABIs. Please redeploy contracts on both networks to ensure consistency.${line}`
    );
    process.exit(1);
  }
}

// Generate TypeScript ABI file
const tsCode = `/*
  This file is auto-generated by 'npm run genabi'
  Do not edit manually - changes will be overwritten
  
  Contract: ${CONTRACT_NAME}
  Generated: ${new Date().toISOString()}
*/

export const ${CONTRACT_NAME}ABI = ${JSON.stringify({ abi: deployLocalhost.abi }, null, 2)} as const;

export type ${CONTRACT_NAME}ABI = typeof ${CONTRACT_NAME}ABI.abi;
`;

// Generate TypeScript addresses file
const tsAddresses = `/*
  This file is auto-generated by 'npm run genabi'  
  Do not edit manually - changes will be overwritten
  
  Contract: ${CONTRACT_NAME}
  Generated: ${new Date().toISOString()}
*/

export const ${CONTRACT_NAME}Addresses = {
  "11155111": { 
    address: "${deploySepolia.address}" as const, 
    chainId: 11155111, 
    chainName: "sepolia" 
  },
  "31337": { 
    address: "${deployLocalhost.address}" as const, 
    chainId: 31337, 
    chainName: "hardhat" 
  },
} as const;

export type ${CONTRACT_NAME}Addresses = typeof ${CONTRACT_NAME}Addresses;

// Helper to get contract address by chain ID
export function get${CONTRACT_NAME}Address(chainId: number): string {
  const key = chainId.toString() as keyof typeof ${CONTRACT_NAME}Addresses;
  const deployment = ${CONTRACT_NAME}Addresses[key];
  
  if (!deployment) {
    throw new Error(\`${CONTRACT_NAME} not deployed on chain \${chainId}\`);
  }
  
  if (deployment.address === "0x0000000000000000000000000000000000000000") {
    throw new Error(\`${CONTRACT_NAME} not deployed on \${deployment.chainName} (chain \${chainId})\`);
  }
  
  return deployment.address;
}

// Supported chain IDs
export const SUPPORTED_CHAIN_IDS = [31337, 11155111] as const;
`;

// Write generated files
const abiFilePath = path.join(outdir, `${CONTRACT_NAME}ABI.ts`);
const addressesFilePath = path.join(outdir, `${CONTRACT_NAME}Addresses.ts`);

fs.writeFileSync(abiFilePath, tsCode, "utf-8");
fs.writeFileSync(addressesFilePath, tsAddresses, "utf-8");

console.log(`âœ… Generated ${abiFilePath}`);
console.log(`âœ… Generated ${addressesFilePath}`);
console.log("\nðŸ“‹ Contract Addresses:");
console.log(`   Localhost (31337): ${deployLocalhost.address}`);
console.log(`   Sepolia (11155111): ${deploySepolia.address}`);
console.log("\nðŸŽ¯ Ready for frontend integration!");
